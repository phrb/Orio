
====== START ORIO ======

----- begin reading the source file: atax2.src1.c -----
----- finished reading the source file -----

----- begin parsing annotations -----
----- finished parsing annotations -----

----- begin optimizations -----
Search_Space         = 8.234e+13
Number_of_Parameters = 18
Numeric_Parameters   = 13
Binary_Parameters    = 05
['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
[[1, 16, 32, 64, 128, 256, 512], [1, 16, 32, 64, 128, 256, 512], [1, 16, 32, 64, 128, 256, 512], [1, 64, 128, 256, 512, 1024, 2048], [1, 64, 128, 256, 512, 1024, 2048], [1, 64, 128, 256, 512, 1024, 2048], [False, True], [False, True], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 8, 32], [1, 8, 32], [1, 8, 32], [False, True], [False, True], [False, True]]

----- begin empirical tuning for problem size -----
 N = 10000
Parameters: {'ACOPY_x': [0, 2], 'ACOPY_y': [0, 2], 'RT_K': [0, 3], 'T1_I': [0, 7], 'T1_J': [0, 7], 'T1_K': [0, 7], 'U_K': [0, 30], 'U_J': [0, 30], 'U_I': [0, 30], 'U1_I': [0, 30], 'T2_K': [0, 7], 'T2_J': [0, 7], 'T2_I': [0, 7], 'VEC2': [0, 2], 'VEC1': [0, 2], 'RT_I': [0, 3], 'SCR': [0, 2], 'RT_J': [0, 3]}

----- begin random search -----
['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
18
Building seed search space (does not spend evaluations)
Using pre-generated space for this size
Starting DOPT-anova
Step 0
 ~ T1_I + T1_J + T1_K + T2_I + T2_J + T2_K + ACOPY_x + ACOPY_y + U1_I + U_I + U_J + U_K + RT_I + RT_J + RT_K + SCR + VEC1 + VEC2
Fixed Factors: {}
Full data does not fit on budget
Computing D-Optimal Design
Updating Constraints
Updated Constraint: True and (((T2_I ==1 )or (T2_I %T1_I ==0 ))) and (((T2_J ==1 )or (T2_J %T1_J ==0 ))) and (((T2_K ==1 )or (T2_K %T1_K ==0 ))) and ((RT_I *RT_J +RT_I *RT_K +RT_J *RT_K <=150 )) and (((U_I ==1 )or (U_J ==1 )or (U_K ==1 )))
Computing D-Optimal Design with 36 experiments
Design Formula:  ~ T1_I + T1_J + T1_K + T2_I + T2_J + T2_K + ACOPY_x + ACOPY_y + U1_I + U_I + U_J + U_K + RT_I + RT_J + RT_K + SCR + VEC1 + VEC2
Starting "optMonteCarlo" run
       var low high center nLevels round factor   mix
1     T1_I   0    6      0       7     0  FALSE FALSE
2     T1_J   0    6      0       7     0  FALSE FALSE
3     T1_K   0    6      0       7     0  FALSE FALSE
4     T2_I   0    6      0       7     0  FALSE FALSE
5     T2_J   0    6      0       7     0  FALSE FALSE
6     T2_K   0    6      0       7     0  FALSE FALSE
7  ACOPY_x   0    1      0       2     0  FALSE FALSE
8  ACOPY_y   0    1      0       2     0  FALSE FALSE
9     U1_I   0   29      0      30     0  FALSE FALSE
10     U_I   0   29      0      30     0  FALSE FALSE
11     U_J   0   29      0      30     0  FALSE FALSE
12     U_K   0   29      0      30     0  FALSE FALSE
13    RT_I   0    2      0       3     0  FALSE FALSE
14    RT_J   0    2      0       3     0  FALSE FALSE
15    RT_K   0    2      0       3     0  FALSE FALSE
16     SCR   0    1      0       2     0  FALSE FALSE
17    VEC1   0    1      0       2     0  FALSE FALSE
18    VEC2   0    1      0       2     0  FALSE FALSE

   T1_I T1_J T1_K T2_I T2_J T2_K ACOPY_x ACOPY_y U1_I U_I U_J U_K RT_I RT_J
1     4    2    1    2    6    3       0       0   23   0  20  27    1    0
2     5    2    5    3    3    5       0       0   21   9   0  29    0    0
3     0    6    6    2    4    5       0       1    5   0  28  19    1    0
4     0    0    1    2    0    1       1       1   29  17  20   0    0    1
5     6    1    1    0    2    5       1       0   15   0   9  14    0    1
6     3    5    0    1    0    1       0       0   23   2   0  16    2    0
7     5    3    5    4    4    0       0       1   19   0  16  22    0    2
8     5    3    4    0    4    5       1       1   13  29   0  23    0    0
9     1    6    2    4    5    1       1       1   16  28   0  29    1    0
10    6    0    4    6    1    6       1       1    5   0   8  28    1    1
11    0    2    1    5    2    6       0       0   23   1  10   0    0    0
12    3    0    3    4    3    4       0       1    3  28   0  25    2    0
13    5    5    0    0    4    2       0       0    8  25   0   5    0    1
14    5    3    1    6    2    5       1       0    5   5  27   0    2    0
15    0    0    3    2    2    5       0       1   28  11  28   0    2    0
16    1    3    6    4    0    5       1       0   12  18   0  29    0    0
17    3    1    5    4    0    0       0       0    3  25  14   0    0    2
18    1    0    4    5    3    5       0       0   27   8   0   1    0    0
19    1    4    5    2    3    0       1       0    5  20  19   0    0    0
20    6    1    4    4    0    3       0       1    2   1   7   0    2    0
21    2    0    2    1    3    4       1       0    2  29   0  19    0    0
22    0    6    6    0    6    6       0       0   13   4   1   0    1    1
23    1    4    2    6    0    1       1       1   28  28   0  15    0    1
24    4    1    5    2    3    0       1       1    7  22  20   0    0    0
25    1    5    0    2    3    1       1       1    1   9   0  28    0    1
26    3    5    3    4    3    5       0       0   27  26   4   0    0    2
27    3    3    0    4    4    1       0       1    1   3   6   0    0    0
28    3    3    5    0    1    0       1       1   10   0   2  28    2    0
29    0    1    3    3    5    1       0       0    1   9   0  25    0    1
30    5    2    2    3    0    1       0       0   22   0  28  19    0    0
31    0    4    1    4    6    2       1       1   27   0   7  16    1    1
32    3    4    0    2    3    6       1       0    1   0  14  24    0    0
33    4    0    2    2    5    3       0       0    4   0  25  18    0    2
34    6    6    3    5    6    1       1       0   25   1  21   0    1    0
35    5    0    0    4    6    3       0       1   24  23  16   0    1    0
36    6    0    5    5    5    4       1       0   18  25  11   0    1    1
   RT_K SCR VEC1 VEC2
1     1   0    0    0
2     0   0    1    0
3     1   1    1    0
4     1   0    0    0
5     1   0    1    0
6     0   1    1    0
7     0   1    0    1
8     2   1    0    1
9     1   0    1    1
10    0   1    1    1
11    2   1    0    1
12    0   1    0    1
13    1   1    1    1
14    0   0    0    1
15    0   1    1    0
16    2   1    0    0
17    0   0    1    1
18    1   0    0    1
19    2   1    1    0
20    0   1    0    0
21    0   1    1    1
22    0   1    0    1
23    1   0    1    0
24    0   0    0    1
25    0   1    0    0
26    0   1    0    0
27    2   0    1    1
28    0   1    1    1
29    1   1    0    0
30    0   1    1    1
31    0   0    1    1
32    0   0    0    0
33    0   0    1    0
34    1   1    0    0
35    0   1    1    0
36    0   1    1    0

D-Efficiency Approximation: [1] 0.627

Measuring design of size 18
Testing candidate 1: [4, 2, 1, 2, 6, 3, 0, 0, 23, 0, 20, 27, 1, 0, 1, 0, 0, 0]
Length of requested configs: 1
OrderedDict([('id', 1), ('T2_K', 256), ('T2_J', 2048), ('T2_I', 128), ('mean_confidence_interval_inf', 0.3939877909587151), ('RT_K', 8), ('T1_I', 128), ('T1_J', 32), ('T1_K', 16), ('VEC2', False), ('VEC1', False), ('SCR', False), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 24), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.39485120904128496), ('cost_std', 0.00031149999999999234), ('cost_mean', 0.39441950000000003), ('U_J', 21), ('U_I', 1), ('correct_result', True), ('U_K', 28), ('RT_I', 8)])
My perf_costs: {'[4, 2, 1, 2, 6, 3, 0, 0, 23, 0, 20, 27, 1, 0, 1, 0, 0, 0]': ([0.39441950000000003, 0.39441950000000003], [inf, inf])}
Testing candidate 2: [5, 2, 5, 3, 3, 5, 0, 0, 21, 9, 0, 29, 0, 0, 0, 0, 1, 0]
Length of requested configs: 1
OrderedDict([('id', 2), ('T2_K', 1024), ('T2_J', 256), ('T2_I', 256), ('mean_confidence_interval_inf', 0.4344586879374089), ('RT_K', 1), ('T1_I', 256), ('T1_J', 32), ('T1_K', 256), ('VEC2', False), ('VEC1', True), ('SCR', False), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 22), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.4680613120625911), ('cost_std', 0.012122999999999995), ('cost_mean', 0.45126), ('U_J', 1), ('U_I', 10), ('correct_result', True), ('U_K', 30), ('RT_I', 1)])
My perf_costs: {'[5, 2, 5, 3, 3, 5, 0, 0, 21, 9, 0, 29, 0, 0, 0, 0, 1, 0]': ([0.45126, 0.45126], [inf, inf])}
Testing candidate 3: [0, 6, 6, 2, 4, 5, 0, 1, 5, 0, 28, 19, 1, 0, 1, 1, 1, 0]
Length of requested configs: 1
OrderedDict([('id', 3), ('T2_K', 1024), ('T2_J', 512), ('T2_I', 128), ('mean_confidence_interval_inf', 0.4688785486580225), ('RT_K', 8), ('T1_I', 1), ('T1_J', 512), ('T1_K', 512), ('VEC2', False), ('VEC1', True), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', True), ('U1_I', 6), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.4730764513419776), ('cost_std', 0.001514500000000002), ('cost_mean', 0.47097750000000005), ('U_J', 29), ('U_I', 1), ('correct_result', True), ('U_K', 20), ('RT_I', 8)])
My perf_costs: {'[0, 6, 6, 2, 4, 5, 0, 1, 5, 0, 28, 19, 1, 0, 1, 1, 1, 0]': ([0.47097750000000005, 0.47097750000000005], [inf, inf])}
Testing candidate 4: [0, 0, 1, 2, 0, 1, 1, 1, 29, 17, 20, 0, 0, 1, 1, 0, 0, 0]
Length of requested configs: 1
OrderedDict([('id', 4), ('T2_K', 64), ('T2_J', 1), ('T2_I', 128), ('mean_confidence_interval_inf', 0.5357392138439846), ('RT_K', 8), ('T1_I', 1), ('T1_J', 1), ('T1_K', 16), ('VEC2', False), ('VEC1', False), ('SCR', False), ('ACOPY_x', True), ('ACOPY_y', True), ('U1_I', 30), ('RT_J', 8), ('runs', 2), ('mean_confidence_interval_sup', 0.5366857861560154), ('cost_std', 0.0003414999999999946), ('cost_mean', 0.5362125), ('U_J', 21), ('U_I', 18), ('correct_result', True), ('U_K', 1), ('RT_I', 1)])
My perf_costs: {'[0, 0, 1, 2, 0, 1, 1, 1, 29, 17, 20, 0, 0, 1, 1, 0, 0, 0]': ([0.5362125, 0.5362125], [inf, inf])}
Testing candidate 5: [6, 1, 1, 0, 2, 5, 1, 0, 15, 0, 9, 14, 0, 1, 1, 0, 1, 0]
Length of requested configs: 1
OrderedDict([('id', 5), ('T2_K', 1024), ('T2_J', 128), ('T2_I', 1), ('mean_confidence_interval_inf', 0.8313110700605598), ('RT_K', 8), ('T1_I', 512), ('T1_J', 16), ('T1_K', 16), ('VEC2', False), ('VEC1', True), ('SCR', False), ('ACOPY_x', True), ('ACOPY_y', False), ('U1_I', 16), ('RT_J', 8), ('runs', 2), ('mean_confidence_interval_sup', 0.8328979299394402), ('cost_std', 0.0005724999999999758), ('cost_mean', 0.8321045), ('U_J', 10), ('U_I', 1), ('correct_result', True), ('U_K', 15), ('RT_I', 1)])
My perf_costs: {'[6, 1, 1, 0, 2, 5, 1, 0, 15, 0, 9, 14, 0, 1, 1, 0, 1, 0]': ([0.8321045, 0.8321045], [inf, inf])}
Testing candidate 6: [3, 5, 0, 1, 0, 1, 0, 0, 23, 2, 0, 16, 2, 0, 0, 1, 1, 0]
Length of requested configs: 1
OrderedDict([('id', 6), ('T2_K', 64), ('T2_J', 1), ('T2_I', 64), ('mean_confidence_interval_inf', 0.4784927822536849), ('RT_K', 1), ('T1_I', 64), ('T1_J', 256), ('T1_K', 1), ('VEC2', False), ('VEC1', True), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 24), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.4789612177463151), ('cost_std', 0.00016900000000000248), ('cost_mean', 0.478727), ('U_J', 1), ('U_I', 3), ('correct_result', True), ('U_K', 17), ('RT_I', 32)])
My perf_costs: {'[3, 5, 0, 1, 0, 1, 0, 0, 23, 2, 0, 16, 2, 0, 0, 1, 1, 0]': ([0.478727, 0.478727], [inf, inf])}
Testing candidate 7: [5, 3, 5, 4, 4, 0, 0, 1, 19, 0, 16, 22, 0, 2, 0, 1, 0, 1]
Length of requested configs: 1
OrderedDict([('id', 7), ('T2_K', 1), ('T2_J', 512), ('T2_I', 512), ('mean_confidence_interval_inf', 0.773665227772033), ('RT_K', 1), ('T1_I', 256), ('T1_J', 64), ('T1_K', 256), ('VEC2', True), ('VEC1', False), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', True), ('U1_I', 20), ('RT_J', 32), ('runs', 2), ('mean_confidence_interval_sup', 0.7752437722279671), ('cost_std', 0.0005695000000000006), ('cost_mean', 0.7744545), ('U_J', 17), ('U_I', 1), ('correct_result', True), ('U_K', 23), ('RT_I', 1)])
My perf_costs: {'[5, 3, 5, 4, 4, 0, 0, 1, 19, 0, 16, 22, 0, 2, 0, 1, 0, 1]': ([0.7744545, 0.7744545], [inf, inf])}
Testing candidate 8: [5, 3, 4, 0, 4, 5, 1, 1, 13, 29, 0, 23, 0, 0, 2, 1, 0, 1]
Length of requested configs: 1
OrderedDict([('id', 8), ('T2_K', 1024), ('T2_J', 512), ('T2_I', 1), ('mean_confidence_interval_inf', inf), ('RT_K', 32), ('T1_I', 256), ('T1_J', 64), ('T1_K', 128), ('VEC2', True), ('VEC1', False), ('SCR', True), ('ACOPY_x', True), ('ACOPY_y', True), ('U1_I', 14), ('RT_J', 1), ('runs', 1), ('mean_confidence_interval_sup', inf), ('cost_std', inf), ('cost_mean', inf), ('U_J', 1), ('U_I', 30), ('correct_result', False), ('U_K', 24), ('RT_I', 1)])
My perf_costs: {'[5, 3, 4, 0, 4, 5, 1, 1, 13, 29, 0, 23, 0, 0, 2, 1, 0, 1]': ([inf], [inf])}
Testing candidate 9: [1, 6, 2, 4, 5, 1, 1, 1, 16, 28, 0, 29, 1, 0, 1, 0, 1, 1]
Length of requested configs: 1
OrderedDict([('id', 9), ('T2_K', 64), ('T2_J', 1024), ('T2_I', 512), ('mean_confidence_interval_inf', 0.276870099417637), ('RT_K', 8), ('T1_I', 16), ('T1_J', 512), ('T1_K', 32), ('VEC2', True), ('VEC1', True), ('SCR', False), ('ACOPY_x', True), ('ACOPY_y', True), ('U1_I', 17), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.27740090058236294), ('cost_std', 0.00019149999999998335), ('cost_mean', 0.2771355), ('U_J', 1), ('U_I', 29), ('correct_result', True), ('U_K', 30), ('RT_I', 8)])
My perf_costs: {'[1, 6, 2, 4, 5, 1, 1, 1, 16, 28, 0, 29, 1, 0, 1, 0, 1, 1]': ([0.2771355, 0.2771355], [inf, inf])}
Testing candidate 10: [6, 0, 4, 6, 1, 6, 1, 1, 5, 0, 8, 28, 1, 1, 0, 1, 1, 1]
Length of requested configs: 1
OrderedDict([('id', 10), ('T2_K', 2048), ('T2_J', 64), ('T2_I', 2048), ('mean_confidence_interval_inf', 0.2570771733805273), ('RT_K', 1), ('T1_I', 512), ('T1_J', 1), ('T1_K', 128), ('VEC2', True), ('VEC1', True), ('SCR', True), ('ACOPY_x', True), ('ACOPY_y', True), ('U1_I', 6), ('RT_J', 8), ('runs', 2), ('mean_confidence_interval_sup', 0.2577798266194727), ('cost_std', 0.0002535000000000176), ('cost_mean', 0.2574285), ('U_J', 9), ('U_I', 1), ('correct_result', True), ('U_K', 29), ('RT_I', 8)])
My perf_costs: {'[6, 0, 4, 6, 1, 6, 1, 1, 5, 0, 8, 28, 1, 1, 0, 1, 1, 1]': ([0.2574285, 0.2574285], [inf, inf])}
Testing candidate 11: [0, 2, 1, 5, 2, 6, 0, 0, 23, 1, 10, 0, 0, 0, 2, 1, 0, 1]
Length of requested configs: 1
OrderedDict([('id', 11), ('T2_K', 2048), ('T2_J', 128), ('T2_I', 1024), ('mean_confidence_interval_inf', 0.39559545422337816), ('RT_K', 32), ('T1_I', 1), ('T1_J', 32), ('T1_K', 16), ('VEC2', True), ('VEC1', False), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 24), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.3971005457766219), ('cost_std', 0.0005429999999999879), ('cost_mean', 0.39634800000000003), ('U_J', 11), ('U_I', 2), ('correct_result', True), ('U_K', 1), ('RT_I', 1)])
My perf_costs: {'[0, 2, 1, 5, 2, 6, 0, 0, 23, 1, 10, 0, 0, 0, 2, 1, 0, 1]': ([0.39634800000000003, 0.39634800000000003], [inf, inf])}
Testing candidate 12: [3, 0, 3, 4, 3, 4, 0, 1, 3, 28, 0, 25, 2, 0, 0, 1, 0, 1]
Length of requested configs: 1
OrderedDict([('id', 12), ('T2_K', 512), ('T2_J', 256), ('T2_I', 512), ('mean_confidence_interval_inf', 0.3355283659121211), ('RT_K', 1), ('T1_I', 64), ('T1_J', 1), ('T1_K', 64), ('VEC2', True), ('VEC1', False), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', True), ('U1_I', 4), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.3378026340878789), ('cost_std', 0.0008205000000000018), ('cost_mean', 0.3366655), ('U_J', 1), ('U_I', 29), ('correct_result', True), ('U_K', 26), ('RT_I', 32)])
My perf_costs: {'[3, 0, 3, 4, 3, 4, 0, 1, 3, 28, 0, 25, 2, 0, 0, 1, 0, 1]': ([0.3366655, 0.3366655], [inf, inf])}
Testing candidate 13: [5, 5, 0, 0, 4, 2, 0, 0, 8, 25, 0, 5, 0, 1, 1, 1, 1, 1]
Length of requested configs: 1
OrderedDict([('id', 13), ('T2_K', 128), ('T2_J', 512), ('T2_I', 1), ('mean_confidence_interval_inf', 0.30049627105715837), ('RT_K', 8), ('T1_I', 256), ('T1_J', 256), ('T1_K', 1), ('VEC2', True), ('VEC1', True), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 9), ('RT_J', 8), ('runs', 2), ('mean_confidence_interval_sup', 0.3016507289428416), ('cost_std', 0.0004164999999999863), ('cost_mean', 0.3010735), ('U_J', 1), ('U_I', 26), ('correct_result', True), ('U_K', 6), ('RT_I', 1)])
My perf_costs: {'[5, 5, 0, 0, 4, 2, 0, 0, 8, 25, 0, 5, 0, 1, 1, 1, 1, 1]': ([0.3010735, 0.3010735], [inf, inf])}
Testing candidate 14: [5, 3, 1, 6, 2, 5, 1, 0, 5, 5, 27, 0, 2, 0, 0, 0, 0, 1]
Length of requested configs: 1
OrderedDict([('id', 14), ('T2_K', 1024), ('T2_J', 128), ('T2_I', 2048), ('mean_confidence_interval_inf', 0.5938310452053284), ('RT_K', 1), ('T1_I', 256), ('T1_J', 64), ('T1_K', 16), ('VEC2', True), ('VEC1', False), ('SCR', False), ('ACOPY_x', True), ('ACOPY_y', False), ('U1_I', 6), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.6125989547946717), ('cost_std', 0.006771000000000027), ('cost_mean', 0.6032150000000001), ('U_J', 28), ('U_I', 6), ('correct_result', True), ('U_K', 1), ('RT_I', 32)])
My perf_costs: {'[5, 3, 1, 6, 2, 5, 1, 0, 5, 5, 27, 0, 2, 0, 0, 0, 0, 1]': ([0.6032150000000001, 0.6032150000000001], [inf, inf])}
Testing candidate 15: [0, 0, 3, 2, 2, 5, 0, 1, 28, 11, 28, 0, 2, 0, 0, 1, 1, 0]
Length of requested configs: 1
OrderedDict([('id', 15), ('T2_K', 1024), ('T2_J', 128), ('T2_I', 128), ('mean_confidence_interval_inf', 0.5778592756198325), ('RT_K', 1), ('T1_I', 1), ('T1_J', 1), ('T1_K', 64), ('VEC2', False), ('VEC1', True), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', True), ('U1_I', 29), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.5784247243801673), ('cost_std', 0.00020400000000003748), ('cost_mean', 0.5781419999999999), ('U_J', 29), ('U_I', 12), ('correct_result', True), ('U_K', 1), ('RT_I', 32)])
My perf_costs: {'[0, 0, 3, 2, 2, 5, 0, 1, 28, 11, 28, 0, 2, 0, 0, 1, 1, 0]': ([0.5781419999999999, 0.5781419999999999], [inf, inf])}
Testing candidate 16: [1, 3, 6, 4, 0, 5, 1, 0, 12, 18, 0, 29, 0, 0, 2, 1, 0, 0]
Length of requested configs: 1
OrderedDict([('id', 16), ('T2_K', 1024), ('T2_J', 1), ('T2_I', 512), ('mean_confidence_interval_inf', 0.6439410104460361), ('RT_K', 32), ('T1_I', 16), ('T1_J', 64), ('T1_K', 512), ('VEC2', False), ('VEC1', False), ('SCR', True), ('ACOPY_x', True), ('ACOPY_y', False), ('U1_I', 13), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.6444149895539637), ('cost_std', 0.00017099999999997673), ('cost_mean', 0.6441779999999999), ('U_J', 1), ('U_I', 19), ('correct_result', True), ('U_K', 30), ('RT_I', 1)])
My perf_costs: {'[1, 3, 6, 4, 0, 5, 1, 0, 12, 18, 0, 29, 0, 0, 2, 1, 0, 0]': ([0.6441779999999999, 0.6441779999999999], [inf, inf])}
Testing candidate 17: [3, 1, 5, 4, 0, 0, 0, 0, 3, 25, 14, 0, 0, 2, 0, 0, 1, 1]
Length of requested configs: 1
OrderedDict([('id', 17), ('T2_K', 1), ('T2_J', 1), ('T2_I', 512), ('mean_confidence_interval_inf', 0.6422933461007109), ('RT_K', 1), ('T1_I', 64), ('T1_J', 16), ('T1_K', 256), ('VEC2', True), ('VEC1', True), ('SCR', False), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 4), ('RT_J', 32), ('runs', 2), ('mean_confidence_interval_sup', 0.6428726538992892), ('cost_std', 0.00020900000000001473), ('cost_mean', 0.642583), ('U_J', 15), ('U_I', 26), ('correct_result', True), ('U_K', 1), ('RT_I', 1)])
My perf_costs: {'[3, 1, 5, 4, 0, 0, 0, 0, 3, 25, 14, 0, 0, 2, 0, 0, 1, 1]': ([0.642583, 0.642583], [inf, inf])}
Testing candidate 18: [1, 0, 4, 5, 3, 5, 0, 0, 27, 8, 0, 1, 0, 0, 1, 0, 0, 1]
Length of requested configs: 1
OrderedDict([('id', 18), ('T2_K', 1024), ('T2_J', 256), ('T2_I', 1024), ('mean_confidence_interval_inf', 0.48997049336614773), ('RT_K', 8), ('T1_I', 16), ('T1_J', 1), ('T1_K', 128), ('VEC2', True), ('VEC1', False), ('SCR', False), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 28), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.49006750663385223), ('cost_std', 3.500000000000725e-05), ('cost_mean', 0.490019), ('U_J', 1), ('U_I', 9), ('correct_result', True), ('U_K', 2), ('RT_I', 1)])
My perf_costs: {'[1, 0, 4, 5, 3, 5, 0, 0, 27, 8, 0, 1, 0, 0, 1, 0, 0, 1]': ([0.490019, 0.490019], [inf, inf])}
Testing candidate 19: [1, 4, 5, 2, 3, 0, 1, 0, 5, 20, 19, 0, 0, 0, 2, 1, 1, 0]
Length of requested configs: 1
OrderedDict([('id', 19), ('T2_K', 1), ('T2_J', 256), ('T2_I', 128), ('mean_confidence_interval_inf', 0.6425471485861245), ('RT_K', 32), ('T1_I', 16), ('T1_J', 128), ('T1_K', 256), ('VEC2', False), ('VEC1', True), ('SCR', True), ('ACOPY_x', True), ('ACOPY_y', False), ('U1_I', 6), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.6437168514138756), ('cost_std', 0.00042199999999997795), ('cost_mean', 0.643132), ('U_J', 20), ('U_I', 21), ('correct_result', True), ('U_K', 1), ('RT_I', 1)])
My perf_costs: {'[1, 4, 5, 2, 3, 0, 1, 0, 5, 20, 19, 0, 0, 0, 2, 1, 1, 0]': ([0.643132, 0.643132], [inf, inf])}
Testing candidate 20: [6, 1, 4, 4, 0, 3, 0, 1, 2, 1, 7, 0, 2, 0, 0, 1, 0, 0]
Length of requested configs: 1
OrderedDict([('id', 20), ('T2_K', 256), ('T2_J', 1), ('T2_I', 512), ('mean_confidence_interval_inf', 0.32256077877167283), ('RT_K', 1), ('T1_I', 512), ('T1_J', 16), ('T1_K', 128), ('VEC2', False), ('VEC1', False), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', True), ('U1_I', 3), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.3228712212283272), ('cost_std', 0.00011200000000000099), ('cost_mean', 0.322716), ('U_J', 8), ('U_I', 2), ('correct_result', True), ('U_K', 1), ('RT_I', 32)])
My perf_costs: {'[6, 1, 4, 4, 0, 3, 0, 1, 2, 1, 7, 0, 2, 0, 0, 1, 0, 0]': ([0.322716, 0.322716], [inf, inf])}
Testing candidate 21: [2, 0, 2, 1, 3, 4, 1, 0, 2, 29, 0, 19, 0, 0, 0, 1, 1, 1]
Length of requested configs: 1
OrderedDict([('id', 21), ('T2_K', 512), ('T2_J', 256), ('T2_I', 64), ('mean_confidence_interval_inf', 0.4397632634327905), ('RT_K', 1), ('T1_I', 32), ('T1_J', 1), ('T1_K', 32), ('VEC2', True), ('VEC1', True), ('SCR', True), ('ACOPY_x', True), ('ACOPY_y', False), ('U1_I', 3), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.4397757365672096), ('cost_std', 4.499999999990623e-06), ('cost_mean', 0.43976950000000004), ('U_J', 1), ('U_I', 30), ('correct_result', True), ('U_K', 20), ('RT_I', 1)])
My perf_costs: {'[2, 0, 2, 1, 3, 4, 1, 0, 2, 29, 0, 19, 0, 0, 0, 1, 1, 1]': ([0.43976950000000004, 0.43976950000000004], [inf, inf])}
Testing candidate 22: [0, 6, 6, 0, 6, 6, 0, 0, 13, 4, 1, 0, 1, 1, 0, 1, 0, 1]
Length of requested configs: 1
OrderedDict([('id', 22), ('T2_K', 2048), ('T2_J', 2048), ('T2_I', 1), ('mean_confidence_interval_inf', 0.2238323356546747), ('RT_K', 1), ('T1_I', 1), ('T1_J', 512), ('T1_K', 512), ('VEC2', True), ('VEC1', False), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 14), ('RT_J', 8), ('runs', 2), ('mean_confidence_interval_sup', 0.2239376643453253), ('cost_std', 3.800000000001025e-05), ('cost_mean', 0.223885), ('U_J', 2), ('U_I', 5), ('correct_result', True), ('U_K', 1), ('RT_I', 8)])
My perf_costs: {'[0, 6, 6, 0, 6, 6, 0, 0, 13, 4, 1, 0, 1, 1, 0, 1, 0, 1]': ([0.223885, 0.223885], [inf, inf])}
Testing candidate 23: [1, 4, 2, 6, 0, 1, 1, 1, 28, 28, 0, 15, 0, 1, 1, 0, 1, 0]
Length of requested configs: 1
OrderedDict([('id', 23), ('T2_K', 64), ('T2_J', 1), ('T2_I', 2048), ('mean_confidence_interval_inf', 0.8688070944346443), ('RT_K', 8), ('T1_I', 16), ('T1_J', 128), ('T1_K', 32), ('VEC2', False), ('VEC1', True), ('SCR', False), ('ACOPY_x', True), ('ACOPY_y', True), ('U1_I', 29), ('RT_J', 8), ('runs', 2), ('mean_confidence_interval_sup', 0.8714999055653557), ('cost_std', 0.000971500000000014), ('cost_mean', 0.8701535), ('U_J', 1), ('U_I', 29), ('correct_result', True), ('U_K', 16), ('RT_I', 1)])
My perf_costs: {'[1, 4, 2, 6, 0, 1, 1, 1, 28, 28, 0, 15, 0, 1, 1, 0, 1, 0]': ([0.8701535, 0.8701535], [inf, inf])}
Testing candidate 24: [4, 1, 5, 2, 3, 0, 1, 1, 7, 22, 20, 0, 0, 0, 0, 0, 0, 1]
Length of requested configs: 1
OrderedDict([('id', 24), ('T2_K', 1), ('T2_J', 256), ('T2_I', 128), ('mean_confidence_interval_inf', 0.5690018921173582), ('RT_K', 1), ('T1_I', 128), ('T1_J', 16), ('T1_K', 256), ('VEC2', True), ('VEC1', False), ('SCR', False), ('ACOPY_x', True), ('ACOPY_y', True), ('U1_I', 8), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.5704751078826419), ('cost_std', 0.0005315000000000181), ('cost_mean', 0.5697385), ('U_J', 21), ('U_I', 23), ('correct_result', True), ('U_K', 1), ('RT_I', 1)])
My perf_costs: {'[4, 1, 5, 2, 3, 0, 1, 1, 7, 22, 20, 0, 0, 0, 0, 0, 0, 1]': ([0.5697385, 0.5697385], [inf, inf])}
Testing candidate 25: [1, 5, 0, 2, 3, 1, 1, 1, 1, 9, 0, 28, 0, 1, 0, 1, 0, 0]
Length of requested configs: 1
OrderedDict([('id', 25), ('T2_K', 64), ('T2_J', 256), ('T2_I', 128), ('mean_confidence_interval_inf', 0.5581464078765589), ('RT_K', 1), ('T1_I', 16), ('T1_J', 256), ('T1_K', 1), ('VEC2', False), ('VEC1', False), ('SCR', True), ('ACOPY_x', True), ('ACOPY_y', True), ('U1_I', 2), ('RT_J', 8), ('runs', 2), ('mean_confidence_interval_sup', 0.558344592123441), ('cost_std', 7.150000000000212e-05), ('cost_mean', 0.5582455), ('U_J', 1), ('U_I', 10), ('correct_result', True), ('U_K', 29), ('RT_I', 1)])
My perf_costs: {'[1, 5, 0, 2, 3, 1, 1, 1, 1, 9, 0, 28, 0, 1, 0, 1, 0, 0]': ([0.5582455, 0.5582455], [inf, inf])}
Testing candidate 26: [3, 5, 3, 4, 3, 5, 0, 0, 27, 26, 4, 0, 0, 2, 0, 1, 0, 0]
Length of requested configs: 1
OrderedDict([('id', 26), ('T2_K', 1024), ('T2_J', 256), ('T2_I', 512), ('mean_confidence_interval_inf', 0.8561888401272025), ('RT_K', 1), ('T1_I', 64), ('T1_J', 256), ('T1_K', 64), ('VEC2', False), ('VEC1', False), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 28), ('RT_J', 32), ('runs', 2), ('mean_confidence_interval_sup', 0.8576911598727975), ('cost_std', 0.0005419999999999869), ('cost_mean', 0.85694), ('U_J', 5), ('U_I', 27), ('correct_result', True), ('U_K', 1), ('RT_I', 1)])
My perf_costs: {'[3, 5, 3, 4, 3, 5, 0, 0, 27, 26, 4, 0, 0, 2, 0, 1, 0, 0]': ([0.85694, 0.85694], [inf, inf])}
Testing candidate 27: [3, 3, 0, 4, 4, 1, 0, 1, 1, 3, 6, 0, 0, 0, 2, 0, 1, 1]
Length of requested configs: 1
OrderedDict([('id', 27), ('T2_K', 64), ('T2_J', 512), ('T2_I', 512), ('mean_confidence_interval_inf', inf), ('RT_K', 32), ('T1_I', 64), ('T1_J', 64), ('T1_K', 1), ('VEC2', True), ('VEC1', True), ('SCR', False), ('ACOPY_x', False), ('ACOPY_y', True), ('U1_I', 2), ('RT_J', 1), ('runs', 1), ('mean_confidence_interval_sup', inf), ('cost_std', inf), ('cost_mean', inf), ('U_J', 7), ('U_I', 4), ('correct_result', False), ('U_K', 1), ('RT_I', 1)])
My perf_costs: {'[3, 3, 0, 4, 4, 1, 0, 1, 1, 3, 6, 0, 0, 0, 2, 0, 1, 1]': ([inf], [inf])}
Testing candidate 28: [3, 3, 5, 0, 1, 0, 1, 1, 10, 0, 2, 28, 2, 0, 0, 1, 1, 1]
Length of requested configs: 1
OrderedDict([('id', 28), ('T2_K', 1), ('T2_J', 64), ('T2_I', 1), ('mean_confidence_interval_inf', 0.33350959626579685), ('RT_K', 1), ('T1_I', 64), ('T1_J', 64), ('T1_K', 256), ('VEC2', True), ('VEC1', True), ('SCR', True), ('ACOPY_x', True), ('ACOPY_y', True), ('U1_I', 11), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.33429540373420313), ('cost_std', 0.0002834999999999921), ('cost_mean', 0.3339025), ('U_J', 3), ('U_I', 1), ('correct_result', True), ('U_K', 29), ('RT_I', 32)])
My perf_costs: {'[3, 3, 5, 0, 1, 0, 1, 1, 10, 0, 2, 28, 2, 0, 0, 1, 1, 1]': ([0.3339025, 0.3339025], [inf, inf])}
Testing candidate 29: [0, 1, 3, 3, 5, 1, 0, 0, 1, 9, 0, 25, 0, 1, 1, 1, 0, 0]
Length of requested configs: 1
OrderedDict([('id', 29), ('T2_K', 64), ('T2_J', 1024), ('T2_I', 256), ('mean_confidence_interval_inf', 0.26597740157287864), ('RT_K', 8), ('T1_I', 1), ('T1_J', 16), ('T1_K', 64), ('VEC2', False), ('VEC1', False), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 2), ('RT_J', 8), ('runs', 2), ('mean_confidence_interval_sup', 0.26668559842712136), ('cost_std', 0.0002555000000000196), ('cost_mean', 0.2663315), ('U_J', 1), ('U_I', 10), ('correct_result', True), ('U_K', 26), ('RT_I', 1)])
My perf_costs: {'[0, 1, 3, 3, 5, 1, 0, 0, 1, 9, 0, 25, 0, 1, 1, 1, 0, 0]': ([0.2663315, 0.2663315], [inf, inf])}
Testing candidate 30: [5, 2, 2, 3, 0, 1, 0, 0, 22, 0, 28, 19, 0, 0, 0, 1, 1, 1]
Length of requested configs: 1
OrderedDict([('id', 30), ('T2_K', 64), ('T2_J', 1), ('T2_I', 256), ('mean_confidence_interval_inf', 0.6877281931919375), ('RT_K', 1), ('T1_I', 256), ('T1_J', 32), ('T1_K', 32), ('VEC2', True), ('VEC1', True), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 23), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.6901258068080625), ('cost_std', 0.0008650000000000047), ('cost_mean', 0.688927), ('U_J', 29), ('U_I', 1), ('correct_result', True), ('U_K', 20), ('RT_I', 1)])
My perf_costs: {'[5, 2, 2, 3, 0, 1, 0, 0, 22, 0, 28, 19, 0, 0, 0, 1, 1, 1]': ([0.688927, 0.688927], [inf, inf])}
Testing candidate 31: [0, 4, 1, 4, 6, 2, 1, 1, 27, 0, 7, 16, 1, 1, 0, 0, 1, 1]
Length of requested configs: 1
OrderedDict([('id', 31), ('T2_K', 128), ('T2_J', 2048), ('T2_I', 512), ('mean_confidence_interval_inf', 0.29902747553576897), ('RT_K', 1), ('T1_I', 1), ('T1_J', 128), ('T1_K', 16), ('VEC2', True), ('VEC1', True), ('SCR', False), ('ACOPY_x', True), ('ACOPY_y', True), ('U1_I', 28), ('RT_J', 8), ('runs', 2), ('mean_confidence_interval_sup', 0.299907524464231), ('cost_std', 0.00031749999999999834), ('cost_mean', 0.2994675), ('U_J', 8), ('U_I', 1), ('correct_result', True), ('U_K', 17), ('RT_I', 8)])
My perf_costs: {'[0, 4, 1, 4, 6, 2, 1, 1, 27, 0, 7, 16, 1, 1, 0, 0, 1, 1]': ([0.2994675, 0.2994675], [inf, inf])}
Testing candidate 32: [3, 4, 0, 2, 3, 6, 1, 0, 1, 0, 14, 24, 0, 0, 0, 0, 0, 0]
Length of requested configs: 1
OrderedDict([('id', 32), ('T2_K', 2048), ('T2_J', 256), ('T2_I', 128), ('mean_confidence_interval_inf', 0.7164963572070908), ('RT_K', 1), ('T1_I', 64), ('T1_J', 128), ('T1_K', 1), ('VEC2', False), ('VEC1', False), ('SCR', False), ('ACOPY_x', True), ('ACOPY_y', False), ('U1_I', 2), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.7183756427929091), ('cost_std', 0.0006780000000000119), ('cost_mean', 0.717436), ('U_J', 15), ('U_I', 1), ('correct_result', True), ('U_K', 25), ('RT_I', 1)])
My perf_costs: {'[3, 4, 0, 2, 3, 6, 1, 0, 1, 0, 14, 24, 0, 0, 0, 0, 0, 0]': ([0.717436, 0.717436], [inf, inf])}
Testing candidate 33: [4, 0, 2, 2, 5, 3, 0, 0, 4, 0, 25, 18, 0, 2, 0, 0, 1, 0]
Length of requested configs: 1
OrderedDict([('id', 33), ('T2_K', 256), ('T2_J', 1024), ('T2_I', 128), ('mean_confidence_interval_inf', 0.7352846726300369), ('RT_K', 1), ('T1_I', 128), ('T1_J', 1), ('T1_K', 32), ('VEC2', False), ('VEC1', True), ('SCR', False), ('ACOPY_x', False), ('ACOPY_y', False), ('U1_I', 5), ('RT_J', 32), ('runs', 2), ('mean_confidence_interval_sup', 0.737147327369963), ('cost_std', 0.0006720000000000059), ('cost_mean', 0.736216), ('U_J', 26), ('U_I', 1), ('correct_result', True), ('U_K', 19), ('RT_I', 1)])
My perf_costs: {'[4, 0, 2, 2, 5, 3, 0, 0, 4, 0, 25, 18, 0, 2, 0, 0, 1, 0]': ([0.736216, 0.736216], [inf, inf])}
Testing candidate 34: [6, 6, 3, 5, 6, 1, 1, 0, 25, 1, 21, 0, 1, 0, 1, 1, 0, 0]
Length of requested configs: 1
OrderedDict([('id', 34), ('T2_K', 64), ('T2_J', 2048), ('T2_I', 1024), ('mean_confidence_interval_inf', 0.3288314748754252), ('RT_K', 8), ('T1_I', 512), ('T1_J', 512), ('T1_K', 64), ('VEC2', False), ('VEC1', False), ('SCR', True), ('ACOPY_x', True), ('ACOPY_y', False), ('U1_I', 26), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.3288855251245748), ('cost_std', 1.9500000000005624e-05), ('cost_mean', 0.3288585), ('U_J', 22), ('U_I', 2), ('correct_result', True), ('U_K', 1), ('RT_I', 8)])
My perf_costs: {'[6, 6, 3, 5, 6, 1, 1, 0, 25, 1, 21, 0, 1, 0, 1, 1, 0, 0]': ([0.3288585, 0.3288585], [inf, inf])}
Testing candidate 35: [5, 0, 0, 4, 6, 3, 0, 1, 24, 23, 16, 0, 1, 0, 0, 1, 1, 0]
Length of requested configs: 1
OrderedDict([('id', 35), ('T2_K', 256), ('T2_J', 2048), ('T2_I', 512), ('mean_confidence_interval_inf', 0.38499681227110594), ('RT_K', 1), ('T1_I', 256), ('T1_J', 1), ('T1_K', 1), ('VEC2', False), ('VEC1', True), ('SCR', True), ('ACOPY_x', False), ('ACOPY_y', True), ('U1_I', 25), ('RT_J', 1), ('runs', 2), ('mean_confidence_interval_sup', 0.3852351877288941), ('cost_std', 8.600000000000274e-05), ('cost_mean', 0.385116), ('U_J', 17), ('U_I', 24), ('correct_result', True), ('U_K', 1), ('RT_I', 8)])
My perf_costs: {'[5, 0, 0, 4, 6, 3, 0, 1, 24, 23, 16, 0, 1, 0, 0, 1, 1, 0]': ([0.385116, 0.385116], [inf, inf])}
Testing candidate 36: [6, 0, 5, 5, 5, 4, 1, 0, 18, 25, 11, 0, 1, 1, 0, 1, 1, 0]
Length of requested configs: 1
OrderedDict([('id', 36), ('T2_K', 512), ('T2_J', 1024), ('T2_I', 1024), ('mean_confidence_interval_inf', 0.2329690169897419), ('RT_K', 1), ('T1_I', 512), ('T1_J', 1), ('T1_K', 256), ('VEC2', False), ('VEC1', True), ('SCR', True), ('ACOPY_x', True), ('ACOPY_y', False), ('U1_I', 19), ('RT_J', 8), ('runs', 2), ('mean_confidence_interval_sup', 0.23533198301025807), ('cost_std', 0.0008524999999999922), ('cost_mean', 0.23415049999999998), ('U_J', 12), ('U_I', 26), ('correct_result', True), ('U_K', 1), ('RT_I', 8)])
My perf_costs: {'[6, 0, 5, 5, 5, 4, 1, 0, 18, 25, 11, 0, 1, 1, 0, 1, 1, 0]': ([0.23415049999999998, 0.23415049999999998], [inf, inf])}
Measurements: [0.39441950000000003, 0.45126, 0.47097750000000005, 0.5362125, 0.8321045, 0.478727, 0.7744545, inf, 0.2771355, 0.2574285, 0.39634800000000003, 0.3366655, 0.3010735, 0.6032150000000001, 0.5781419999999999, 0.6441779999999999, 0.642583, 0.490019, 0.643132, 0.322716, 0.43976950000000004, 0.223885, 0.8701535, 0.5697385, 0.5582455, 0.85694, inf, 0.3339025, 0.2663315, 0.688927, 0.2994675, 0.717436, 0.736216, 0.3288585, 0.385116, 0.23415049999999998]
   T1_I T1_J T1_K T2_I T2_J T2_K ACOPY_x ACOPY_y U1_I U_I U_J U_K RT_I RT_J
1     4    2    1    2    6    3       0       0   23   0  20  27    1    0
2     5    2    5    3    3    5       0       0   21   9   0  29    0    0
3     0    6    6    2    4    5       0       1    5   0  28  19    1    0
4     0    0    1    2    0    1       1       1   29  17  20   0    0    1
5     6    1    1    0    2    5       1       0   15   0   9  14    0    1
6     3    5    0    1    0    1       0       0   23   2   0  16    2    0
7     5    3    5    4    4    0       0       1   19   0  16  22    0    2
9     1    6    2    4    5    1       1       1   16  28   0  29    1    0
10    6    0    4    6    1    6       1       1    5   0   8  28    1    1
11    0    2    1    5    2    6       0       0   23   1  10   0    0    0
12    3    0    3    4    3    4       0       1    3  28   0  25    2    0
13    5    5    0    0    4    2       0       0    8  25   0   5    0    1
14    5    3    1    6    2    5       1       0    5   5  27   0    2    0
15    0    0    3    2    2    5       0       1   28  11  28   0    2    0
16    1    3    6    4    0    5       1       0   12  18   0  29    0    0
17    3    1    5    4    0    0       0       0    3  25  14   0    0    2
18    1    0    4    5    3    5       0       0   27   8   0   1    0    0
19    1    4    5    2    3    0       1       0    5  20  19   0    0    0
20    6    1    4    4    0    3       0       1    2   1   7   0    2    0
21    2    0    2    1    3    4       1       0    2  29   0  19    0    0
22    0    6    6    0    6    6       0       0   13   4   1   0    1    1
23    1    4    2    6    0    1       1       1   28  28   0  15    0    1
24    4    1    5    2    3    0       1       1    7  22  20   0    0    0
25    1    5    0    2    3    1       1       1    1   9   0  28    0    1
26    3    5    3    4    3    5       0       0   27  26   4   0    0    2
28    3    3    5    0    1    0       1       1   10   0   2  28    2    0
29    0    1    3    3    5    1       0       0    1   9   0  25    0    1
30    5    2    2    3    0    1       0       0   22   0  28  19    0    0
31    0    4    1    4    6    2       1       1   27   0   7  16    1    1
32    3    4    0    2    3    6       1       0    1   0  14  24    0    0
33    4    0    2    2    5    3       0       0    4   0  25  18    0    2
34    6    6    3    5    6    1       1       0   25   1  21   0    1    0
35    5    0    0    4    6    3       0       1   24  23  16   0    1    0
36    6    0    5    5    5    4       1       0   18  25  11   0    1    1
   RT_K SCR VEC1 VEC2 cost_mean
1     1   0    0    0 0.3944195
2     0   0    1    0 0.4512600
3     1   1    1    0 0.4709775
4     1   0    0    0 0.5362125
5     1   0    1    0 0.8321045
6     0   1    1    0 0.4787270
7     0   1    0    1 0.7744545
9     1   0    1    1 0.2771355
10    0   1    1    1 0.2574285
11    2   1    0    1 0.3963480
12    0   1    0    1 0.3366655
13    1   1    1    1 0.3010735
14    0   0    0    1 0.6032150
15    0   1    1    0 0.5781420
16    2   1    0    0 0.6441780
17    0   0    1    1 0.6425830
18    1   0    0    1 0.4900190
19    2   1    1    0 0.6431320
20    0   1    0    0 0.3227160
21    0   1    1    1 0.4397695
22    0   1    0    1 0.2238850
23    1   0    1    0 0.8701535
24    0   0    0    1 0.5697385
25    0   1    0    0 0.5582455
26    0   1    0    0 0.8569400
28    0   1    1    1 0.3339025
29    1   1    0    0 0.2663315
30    0   1    1    1 0.6889270
31    0   0    1    1 0.2994675
32    0   0    0    0 0.7174360
33    0   0    1    0 0.7362160
34    1   1    0    0 0.3288585
35    0   1    1    0 0.3851160
36    0   1    1    0 0.2341505

Heteroscedasticity Test p-value: 0.0377254046283
Power Transform Step:
Heteroscedasticity Test p-value: 0.162276784718
Regression Step:            Df Sum Sq Mean Sq F value  Pr(>F)   
T1_I         1 0.0000  0.0000   0.000 0.99571   
T1_J         1 0.0010  0.0010   0.013 0.91040   
T1_K         1 0.0425  0.0425   0.533 0.47640   
T2_I         1 0.0003  0.0003   0.004 0.95147   
T2_J         1 0.7315  0.7315   9.183 0.00843 **
T2_K         1 0.0034  0.0034   0.042 0.84014   
ACOPY_x      1 0.0027  0.0027   0.034 0.85537   
ACOPY_y      1 0.0971  0.0971   1.219 0.28694   
U1_I         1 0.0443  0.0443   0.556 0.46757   
U_I          1 0.0012  0.0012   0.015 0.90486   
U_J          1 0.5838  0.5838   7.329 0.01622 * 
U_K          1 0.1456  0.1456   1.828 0.19639   
RT_I         1 0.6403  0.6403   8.038 0.01254 * 
RT_J         1 0.0967  0.0967   1.214 0.28787   
RT_K         1 0.0361  0.0361   0.453 0.51125   
SCR          1 0.0720  0.0720   0.904 0.35671   
VEC1         1 0.0605  0.0605   0.759 0.39733   
VEC2         1 0.1087  0.1087   1.364 0.26101   
Residuals   15 1.1949  0.0797                   
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Predicting Best
Identical predictions (tol = 1e-5): 1
      ACOPY_x ACOPY_y RT_K T1_I T1_J T1_K U_K U_J U_I U1_I T2_K T2_J T2_I VEC2
12312       1       0    0    2    0    0   2   0   4   26    5    6    5    1
      VEC1 RT_I SCR RT_J
12312    1    2   1    0

Getting fixed variables
[1] 6

